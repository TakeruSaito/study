print("j >= loop start")
print( data[, (i + (3*j - 2)):length(data)] )
x <- c(x, vif( lm( data[,i] ~ . , data[, (i + (3*j - 2)):length(data)] ) ) )
print("j >= loop end")
}else{
print("j < loop start")
print( data[, (i + (3*j - 2)):(i + (3*j))] )
x <- c(x, vif( lm( data[,i] ~ . , data[, (i + (3*j - 2)):(i + (3*j))] ) ) )
print("j < loop end")
}
print("end for loop")
}
x <- x[-1]
for(k in 1:length(x)){
if(length(x) != 0){
if(is.na(x[k]) || x[k] >= 10){
vect <- rbind(vect, c(i,(j + k -1)))
}
}
}
}
if(length(vect) >= 2 ){
vname <- 0;
for(i in 2:length(vect[1,])){
data[,vect[i,2]] <- 0
}
}
for(i in length(data):5){
if(sum(data[,i]) == 0){
data <- data[,-i]
}
}
#  return (vect)
return(data)
}
Multico(a)
d
PrepForVIF(a)
d[1,]
PrepForVIF(a)[1,]
d[1,]
PrepForVIF(a)[1,-1:-4]
a
b
lm(b[,1] ~ . , b[,5:length(b)])$coeff
is.na(lm(b[,1] ~ . , b[,5:length(b)])$coeff)
PrepForVIF <- function(PBLData){
buffer <- PBLData
DeleteIndex<- 0
RegrCoeff <- lm(buffer[,5] ~ . , buffer[,5:length(buffer)])$coeff
print(RegrCoeff)
for(i in 1:length(RegrCoeff)){
if(is.na(RegrCoeff[i])){
DeleteIndex <- c(DeleteIndex, i + 4)
}
}
DeleteIndex <- DeleteIndex[-1]
print(DeleteIndex)
if(length(DeleteIndex) != 0){
for(i in length(DeleteIndex):1){
buffer <- buffer[,-DeleteIndex[i]]
}
}
return(buffer)
}
PrepForVIF(a)
PrepForVIF <- function(PBLData){
buffer <- PBLData
DeleteIndex<- 0
RegrCoeff <- lm(buffer[,5] ~ . , buffer[,5:length(buffer)])$coeff
print(RegrCoeff)
for(i in 1:length(RegrCoeff)){
if(is.na(RegrCoeff[i])){
DeleteIndex <- c(DeleteIndex, i + 3)
}
}
DeleteIndex <- DeleteIndex[-1]
print(DeleteIndex)
if(length(DeleteIndex) != 0){
for(i in length(DeleteIndex):1){
buffer <- buffer[,-DeleteIndex[i]]
}
}
return(buffer)
}
PrepForVIF(a)
d[1,]
PrepForVIF <- function(PBLData){
buffer <- PBLData
DeleteIndex<- 0
RegrCoeff <- lm(buffer[,5] ~ . , buffer[,5:length(buffer)])$coeff
for(i in 1:length(RegrCoeff)){
if(is.na(RegrCoeff[i])){
DeleteIndex <- c(DeleteIndex, i + 3)
}
}
DeleteIndex <- DeleteIndex[-1]
if(length(DeleteIndex) != 0){
for(i in length(DeleteIndex):1){
buffer <- buffer[,-DeleteIndex[i]]
}
}
return(buffer)
}
d[1,]
PrepForVIF(a)[1,]
d[1,]
PrepForVIF(a)[1,-1:-4]
PrepForVIF <- function(PBLData){
buffer <- PBLData
DeleteIndex<- 0
RegrCoeff <- lm(buffer[,5] ~ . , buffer[,5:length(buffer)])$coeff
for(i in 1:length(RegrCoeff)){
if(is.na(RegrCoeff[i])){
DeleteIndex <- c(DeleteIndex, i + 3)
}
}
DeleteIndex <- DeleteIndex[-1]
print(DeleteIndex)
if(length(DeleteIndex) != 0){
for(i in length(DeleteIndex):1){
print(buffer[1,DeleteIndex[i]])
buffer <- buffer[,-DeleteIndex[i]]
}
}
return(buffer)
}
PrepForVIF(a)[1,-1:-4]
PrepForVIF <- function(PBLData){
buffer <- PBLData
DeleteIndex<- 0
RegrCoeff <- lm(buffer[,5] ~ . , buffer[,5:length(buffer)])$coeff
for(i in 1:length(RegrCoeff)){
if(is.na(RegrCoeff[i])){
DeleteIndex <- c(DeleteIndex, i + 3)
}
}
DeleteIndex <- DeleteIndex[-1]
print(DeleteIndex)
if(length(DeleteIndex) != 0){
for(i in length(DeleteIndex):1){
print(names(buffer[1,DeleteIndex[i]]))
buffer <- buffer[,-DeleteIndex[i]]
}
}
return(buffer)
}
PrepForVIF(a)[1,-1:-4]
b[1,]
a[1,]
a[1,c(13,18,21,22,23,24,25,26,27,28,29)]
PrepForVIF <- function(PBLData){
buffer <- PBLData
DeleteIndex<- 0
RegrCoeff <- lm(buffer[,5] ~ . , buffer[,5:length(buffer)])$coeff
for(i in 1:length(RegrCoeff)){
if(is.na(RegrCoeff[i])){
DeleteIndex <- c(DeleteIndex, i + 3)
}
}
DeleteIndex <- DeleteIndex[-1]
if(length(DeleteIndex) != 0){
for(i in length(DeleteIndex):1){
print(names(buffer[1,DeleteIndex[i]]))
buffer <- buffer[,-DeleteIndex[i]]
}
}
return(buffer)
}
Multico(a)
Multico <- function(AllFact){
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data <- AllFact  #このAllFactは全調整要因
data[is.na(data)] <- 0
buffer <- data
ts<- 0
for(i in 5:length(data)){
if(sum(data[,i]) == 0){
ts <- c(ts, i)
}
}
ts <- ts[-1]
if(length(ts) != 0){
for(i in length(ts):1){
buffer <- buffer[,-ts[i]]
}
}
data <- buffer
data <- PrepForVIF(data)
vect <- 0
for(i in 5:(length(data) - 3) ){
#    for(j in (i + 1):(length(data) - 1) ){
x <- 0
loop <- floor( (length(data) - i)/3 )
for(j in 1:(loop) ){
#      x <- abs( cor(data[,i] , data[,j]) );
if(j >= loop){
x <- c(x, vif( lm( data[,i] ~ . , data[, (i + (3*j - 2)):length(data)] ) ) )
}else{
x <- c(x, vif( lm( data[,i] ~ . , data[, (i + (3*j - 2)):(i + (3*j))] ) ) )
}
}
x <- x[-1]
for(k in 1:length(x)){
if(length(x) != 0){
if(is.na(x[k]) || x[k] >= 10){
vect <- rbind(vect, c(i,(j + k -1)))
}
}
}
}
if(length(vect) >= 2 ){
vname <- 0;
for(i in 2:length(vect[1,])){
data[,vect[i,2]] <- 0
}
}
for(i in length(data):5){
if(sum(data[,i]) == 0){
data <- data[,-i]
}
}
#  return (vect)
return(data)
}
m <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m <- rbind(m , CalcManHour(PBLData,i))
}
m <- m[-1]
ls()
m <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m <- rbind(m , CalcManHour(PBLData,i))
}
m <- m[-1]
PrepForVIF <- function(PBLData){
buffer <- PBLData
DeleteIndex<- 0
RegrCoeff <- lm(buffer[,5] ~ . , buffer[,5:length(buffer)])$coeff
for(i in 1:length(RegrCoeff)){
if(is.na(RegrCoeff[i])){
DeleteIndex <- c(DeleteIndex, i + 3)
}
}
DeleteIndex <- DeleteIndex[-1]
if(length(DeleteIndex) != 0){
for(i in length(DeleteIndex):1){
buffer <- buffer[,-DeleteIndex[i]]
}
}
return(buffer)
}
m <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m <- rbind(m , CalcManHour(PBLData,i))
}
m <- m[-1]
warnings()
Multico(Choice(PBLData))
CalcManHour <- function(PBL,i){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = " length(multico[1,]) )
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  StepFiveMulti(Study, Est);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[3]  - error)
#  return(ret[,3] - error)
#  return (length(multico))
#  return (ret[3]- error)
}
CalcManHour <- function(PBL,i){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = " length(multico[1,]) )
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  StepFiveMulti(Study, Est);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[3]  - error)
#  return(ret[,3] - error)
#  return (length(multico))
#  return (ret[3]- error)
}
CalcManHour <- function(PBL,i){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) )
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  StepFiveMulti(Study, Est);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[3]  - error)
#  return(ret[,3] - error)
#  return (length(multico))
#  return (ret[3]- error)
}
m <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m <- rbind(m , CalcManHour(PBLData,i))
}
m <- m[-1]
MakeModel(PBLData)
MakeModel <- function(PBL){
SortedData <- Choice(PBL) #工数変動要因を工数誤差との相関係数の高い順にソート
ChoiceCoeff <- ChoiceMKtwo(PBL) #各変動要因の相関係数を代入
multico <- Multico(SortedData) #多重線形性を排除する
#  write.table(ChoiceCoeff, file = "output.txt", append = TRUE, quote = FALSE);
write.csv(ChoiceCoeff, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/MetrixInfluence.csv", quote = FALSE, col.names = FALSE);
print(Data)
MeanRes <- 0
MedianRes <- 0
VarRes <- 0
for(i in 6:length(Data)){ #見積もり工数の誤差をresultに代入
result <- CrossMulti(Data[, 1:i])[, 3]
#    MeanRes <- c(MeanRes, mean(result))
MedianRes <- c(MedianRes, median(result))
VarRes <- c(VarRes, sqrt(variance(result)))
}
MeanRes <- MeanRes[-1]
MedianRes <- MedianRes[-1]
VarRes <- VarRes[-1]
Num <- c(2:(length(VarRes)+1))
names(VarRes) <- Num
names(MedianRes) <- Num
VarSort <- order(abs(VarRes))
VarRes <- VarRes[VarSort]
lim <- 0
for(i in 1:length(VarRes)){
if(VarRes[i] <= 500){ lim <- i }
}
MedianSort <- VarSort[1:lim]
MedianRes <- MedianRes[MedianSort]
MedianSort <- order(abs(MedianRes))
MedianRes <- MedianRes[MedianSort]
return (MedianRes[1])
}
MakeModel(PBLData)
Data
MakeModel <- function(PBL){
SortedData <- Choice(PBL) #工数変動要因を工数誤差との相関係数の高い順にソート
ChoiceCoeff <- ChoiceMKtwo(PBL) #各変動要因の相関係数を代入
multico <- Multico(SortedData) #多重線形性を排除する
#  write.table(ChoiceCoeff, file = "output.txt", append = TRUE, quote = FALSE);
write.csv(ChoiceCoeff, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/MetrixInfluence.csv", quote = FALSE, col.names = FALSE);
MeanRes <- 0
MedianRes <- 0
VarRes <- 0
for(i in 6:length(multico)){ #見積もり工数の誤差をresultに代入
result <- CrossMulti(multico[, 1:i])[, 3]
#    MeanRes <- c(MeanRes, mean(result))
MedianRes <- c(MedianRes, median(result))
VarRes <- c(VarRes, sqrt(variance(result)))
}
MeanRes <- MeanRes[-1]
MedianRes <- MedianRes[-1]
VarRes <- VarRes[-1]
Num <- c(2:(length(VarRes)+1))
names(VarRes) <- Num
names(MedianRes) <- Num
VarSort <- order(abs(VarRes))
VarRes <- VarRes[VarSort]
lim <- 0
for(i in 1:length(VarRes)){
if(VarRes[i] <= 500){ lim <- i }
}
MedianSort <- VarSort[1:lim]
MedianRes <- MedianRes[MedianSort]
MedianSort <- order(abs(MedianRes))
MedianRes <- MedianRes[MedianSort]
return (MedianRes[1])
}
MakeModel(PBLData)
m <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m <- rbind(m , CalcManHour(PBLData,i))
}
m <- m[-1]
m
plot(m, xaxt="n", pch = 20, xlab="projects", ylab="Error of scheduled man-hours and actual man-hours");
axis(side = 1, at = 1:length(m), labels = label)
text(1:length(m), m - 30, ceiling(m))
plot(m, xaxt="n", pch = 20, xlab="projects", ylab="Error of scheduled man-hours and actual man-hours");
axis(side = 1, at = 1:length(m), labels = label)
text(1:length(m), m - 50, ceiling(m))
CalcManHour <- function(PBL,i){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) )
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  StepFiveMulti(Study, Est);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
#  return(ret[,3] - error)
#  return (length(multico))
#  return (ret[3]- error)
}
m1 <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m1 <- rbind(m1 , CalcManHour(PBLData,i))
}
m1 <- m1[-1]
m1
PBLData[1,]
PBLData[,1]
PBLData[,2]
RelaError <- (PBLData[,2] - m1)/m1
RelaError
RelaError <- RelaError*100
RelaError
mean(RelaError)
save.image("2015Model.RData")
m1
RelaError
MakeModel <- function(PBL){
SortedData <- Choice(PBL) #工数変動要因を工数誤差との相関係数の高い順にソート
ChoiceCoeff <- ChoiceMKtwo(PBL) #各変動要因の相関係数を代入
multico <- Multico(SortedData) #多重線形性を排除する
#  write.table(ChoiceCoeff, file = "output.txt", append = TRUE, quote = FALSE);
write.csv(ChoiceCoeff, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/MetrixInfluence.csv", quote = FALSE, col.names = FALSE);
write.csv(multico, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/UseMetrix.csv", quote = FALSE, col.names = FALSE)
MeanRes <- 0
MedianRes <- 0
VarRes <- 0
for(i in 6:length(multico)){ #見積もり工数の誤差をresultに代入
result <- CrossMulti(multico[, 1:i])[, 3]
#    MeanRes <- c(MeanRes, mean(result))
MedianRes <- c(MedianRes, median(result))
VarRes <- c(VarRes, sqrt(variance(result)))
}
MeanRes <- MeanRes[-1]
MedianRes <- MedianRes[-1]
VarRes <- VarRes[-1]
Num <- c(2:(length(VarRes)+1))
names(VarRes) <- Num
names(MedianRes) <- Num
VarSort <- order(abs(VarRes))
VarRes <- VarRes[VarSort]
lim <- 0
for(i in 1:length(VarRes)){
if(VarRes[i] <= 500){ lim <- i }
}
MedianSort <- VarSort[1:lim]
MedianRes <- MedianRes[MedianSort]
MedianSort <- order(abs(MedianRes))
MedianRes <- MedianRes[MedianSort]
return (MedianRes[1])
}
m1 <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m1 <- rbind(m1 , CalcManHour(PBLData,i))
}
m1 <- m1[-1]
m1
m1 <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m1 <- rbind(m1 , CalcManHour(PBLData,i))
}
m1 <- m1[-1]
m1
save.image("2015Model.RData")
