CalcAlpha <- function(pbl){ #csvの元データそのまま
TriAlfa <- lsfit(pbl$Estimated, pbl$FPTrial)$coeff
AppAlfa <- lsfit(pbl$Estimated, pbl$FPApproxi)$coeff
return (TriAlfa)
}
CalcBeta <- function(data, TriAlfa, factor){
FactMulCoeff <- 0
for(i in 5:length(data)){
FactMulCoeff <- c(FactMulCoeff, c(data[,i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sig <- matrix(FactMulCoeff, length(data[,1]), (length(data[1,]) - 4))
sigma <- 0
for(i in 1:length(sig[1,])){
sigma <- sigma + sig[,i]
}
leftFormula <- data$Actual - (TriAlfa[2] * data$FPTrial)
rightFormula <- TriAlfa[2] * data$FPTrial * sigma
x <- data.frame(LEFT=leftFormula, RIGHT=rightFormula);
return( lm(leftFormula~rightFormula, data=x)$coeff )
}
CalcPriMH <- function(pbl, checkData){ # pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl ))
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4, 2]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
Choice <- function(pbl){ #多重線形性排除済みの全データ
　　Data <- pbl; Data[is.na(Data)] <- 0 #欠損値を排除
ret <- 0 #返り値用の変数
for(i in 5:length(Data)){
ret <- c(ret, cor((Data$Actual -  Data$Estimated), Data[, i])) #retに工数と要因間の相関係数を代入
}
ret <- ret[-1]　#初期化の時の0を削除
names(ret) <- names(pbl[1,5:length(pbl)]) #ラベル付
sortList <- order(-abs(ret)) #大きい順にソート
ret <- Data
s <- c(1:4); sortList <- c(s, sortList+4)
ret <- ret[sortList]
return(ret)
}
ChoiceValues <- function(pbl){ #多重線形性排除済みの全データ
　　Data <- pbl; Data[is.na(Data)] <- 0 #欠損値を排除
ret <- 0 #返り値用の変数
for(i in 5:length(Data)){
ret <- c(ret, cor((Data$Actual -  Data$Estimated), Data[, i])) #retに工数と要因間の相関係数を代入
}
ret <- ret[-1]　#初期化の時の0を削除
names(ret) <- names(pbl[1,5:length(pbl)]) #ラベル付
sortList <- order(-abs(ret)) #大きい順にソート
return(ret)
}
CrossValid <- function(pblData){
ret <- 0;
for(i in 1:length(pblData[,1])){
Study <- pblData[-(i),];
Est <- pblData[i,];
ret <- rbind(ret, CalcPriMH(Study, Est))
}
ret <- ret[-1,]
return (ret)
}
MakeModel <- function(PBL){
SortedData <- Choice(PBL) #工数変動要因を工数誤差との相関係数の高い順にソート
ChoiceCoeff <- ChoiceValues(PBL) #各変動要因の相関係数を代入
multico <- Multico(SortedData) #多重線形性を排除する
#  write.table(ChoiceCoeff, file = "output.txt", append = TRUE, quote = FALSE);
write.csv(ChoiceCoeff, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/MetrixInfluence.csv", quote = FALSE, col.names = FALSE);
write.csv(multico, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/UseMetrix.csv", quote = FALSE, col.names = FALSE)
MeanRes <- 0
MedianRes <- 0
VarRes <- 0
for(i in 6:length(multico)){ #見積もり工数の誤差をresultに代入
result <- CrossValid(multico[, 1:i])[, 3]
#    MeanRes <- c(MeanRes, mean(result))
MedianRes <- c(MedianRes, median(result))
VarRes <- c(VarRes, sqrt(variance(result)))
}
MeanRes <- MeanRes[-1]
MedianRes <- MedianRes[-1]
VarRes <- VarRes[-1]
Num <- c(2:(length(VarRes)+1))
names(VarRes) <- Num
names(MedianRes) <- Num
VarSort <- order(abs(VarRes))
VarRes <- VarRes[VarSort]
lim <- 0
for(i in 1:length(VarRes)){
if(VarRes[i] <= 500){ lim <- i }
}
MedianSort <- VarSort[1:lim]
MedianRes <- MedianRes[MedianSort]
MedianSort <- order(abs(MedianRes))
MedianRes <- MedianRes[MedianSort]
return (MedianRes[1])
}
CrossValid(PBLData)
PBLData[1,]
CalcPriMH(PBLData[-5,], PBLData[5,])
CalcPriMH <- function(pbl, checkData){ # pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl ))
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcPriMH(PBLData[-5,], PBLData[5,])
CrossValid(PBLData)
MakeModel(PBLData)
CalcManHour <- function(PBL,i){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) ,"\n")
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
}
CalcManHour(PBLData, 5)
m1
rm('')
rm('ChoiceMKtwo')
rm('Cross')
rm('CrossCor')
rm('CrossMulti')
rm('StepFive')
rm('StepFiveCor')
rm('StepFiveMulti')
rm('StepFourMulti')
rm('StepFourCor')
rm('StepFour')
rm('StepThree')
rm('StepThreeCor')
rm('StepThreeMulti')
rm('StepOne')
CalcManHour(PBLData, 5)
CalcManHour(PBLData, 5)
CalcPriMH <- function(pbl, checkData, type = "multi"){ # pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcManHour(PBLData, 5)
CrossValid <- function(pblData, type = "multi"){
ret <- 0;
for(i in 1:length(pblData[,1])){
Study <- pblData[-(i),];
Est <- pblData[i,];
ret <- rbind(ret, CalcPriMH(Study, Est, type))
}
ret <- ret[-1,]
return (ret)
}
Bunsan <- function(Data, type = "multi"){
ret <- 0
for(i in 6:length(Data)){
ret <- c(ret , sqrt(variance(CrossValid(Data[,1:i])[,3], type)))
}
#ret <- ret[-1]
return (ret)
}
MakeModel <- function(PBL, type = "multi"){
SortedData <- Choice(PBL) #工数変動要因を工数誤差との相関係数の高い順にソート
ChoiceCoeff <- ChoiceValues(PBL) #各変動要因の相関係数を代入
multico <- Multico(SortedData) #多重線形性を排除する
#  write.table(ChoiceCoeff, file = "output.txt", append = TRUE, quote = FALSE);
write.csv(ChoiceCoeff, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/MetrixInfluence.csv", quote = FALSE, col.names = FALSE);
write.csv(multico, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/UseMetrix.csv", quote = FALSE, col.names = FALSE)
MeanRes <- 0
MedianRes <- 0
VarRes <- 0
for(i in 6:length(multico)){ #見積もり工数の誤差をresultに代入
result <- CrossValid(multico[, 1:i], type)[, 3]
#    MeanRes <- c(MeanRes, mean(result))
MedianRes <- c(MedianRes, median(result))
VarRes <- c(VarRes, sqrt(variance(result)))
}
MeanRes <- MeanRes[-1]
MedianRes <- MedianRes[-1]
VarRes <- VarRes[-1]
Num <- c(2:(length(VarRes)+1))
names(VarRes) <- Num
names(MedianRes) <- Num
VarSort <- order(abs(VarRes))
VarRes <- VarRes[VarSort]
lim <- 0
for(i in 1:length(VarRes)){
if(VarRes[i] <= 500){ lim <- i }
}
MedianSort <- VarSort[1:lim]
MedianRes <- MedianRes[MedianSort]
MedianSort <- order(abs(MedianRes))
MedianRes <- MedianRes[MedianSort]
return (MedianRes[1])
}
CalcManHour(PBLData, 5)
CalcManHour(PBLData, 5,type = "cor")
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) ,"\n")
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
}
CalcManHour(PBLData, 5,type = "cor")
CalcManHour(PBLData, 5,type = "regression")
CalcCoeff(PBLData)
t.test(PBLData[,2], PBLData[,5])$statistic
CalcCoeff <- function(SelectedData, type = "multi"){
factor <- 0
data <- SelectedData
data[is.na(data)] <- 0
if(type == "multi" || is.na(type)){
library("QuantPsyc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
factor <- lm.beta(lm((data$Actual - data$Estimated)~., data[-1:-4]))
}else{
for(i in 5:length(data)){
if(type == "regression"){
factor <- rbind(factor, lm((Actual-Estimated)~data[,i], data)$coefficients)
}else if(type == "cor"){
factor <- rbind(factor, cor(data$Actual - data$Estimated, data[,i]))
}else if(type == "t"){
factor <- rbind(factor, t.test(data$Actual - data$Estimated, data[,i]))
}
}
factor <- factor[-1,]
}
factor[is.na(factor)] <- 0
if(type == "regression"){
factor <- factor[,2]
kname <- names(data)[5:length(data)]
names(factor) <- kname
}else if(type == "cor"){
sname <- names(data)[5:length(data)]
names(factor) <- sname
}
return (factor)
}
CalcCoeff(PBLData, type = "t")
CalcCoeff <- function(SelectedData, type = "multi"){
factor <- 0
data <- SelectedData
data[is.na(data)] <- 0
if(type == "multi" || is.na(type)){
library("QuantPsyc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
factor <- lm.beta(lm((data$Actual - data$Estimated)~., data[-1:-4]))
}else{
for(i in 5:length(data)){
if(type == "regression"){
factor <- rbind(factor, lm((Actual-Estimated)~data[,i], data)$coefficients)
}else if(type == "cor"){
factor <- rbind(factor, cor(data$Actual - data$Estimated, data[,i]))
}else if(type == "t"){
factor <- rbind(factor, t.test(data$Actual - data$Estimated, data[,i])$statistic)
}
}
factor <- factor[-1,]
}
factor[is.na(factor)] <- 0
if(type == "regression"){
factor <- factor[,2]
kname <- names(data)[5:length(data)]
names(factor) <- kname
}else if(type == "cor"){
sname <- names(data)[5:length(data)]
names(factor) <- sname
}
return (factor)
}
CalcCoeff(PBLData, type = "t")
CalcCoeff <- function(SelectedData, type = "multi"){
factor <- 0
data <- SelectedData
data[is.na(data)] <- 0
if(type == "multi" || is.na(type)){
library("QuantPsyc", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
factor <- lm.beta(lm((data$Actual - data$Estimated)~., data[-1:-4]))
}else{
for(i in 5:length(data)){
if(type == "regression"){
factor <- rbind(factor, lm((Actual-Estimated)~data[,i], data)$coefficients)
}else if(type == "cor"){
factor <- rbind(factor, cor(data$Actual - data$Estimated, data[,i]))
}else if(type == "t"){
factor <- rbind(factor, t.test(data$Actual - data$Estimated, data[,i])$statistic)
}
}
factor <- factor[-1,]
}
factor[is.na(factor)] <- 0
if(type == "regression"){
factor <- factor[,2]
kname <- names(data)[5:length(data)]
names(factor) <- kname
}else if(type == "cor" || type == "t"){
sname <- names(data)[5:length(data)]
names(factor) <- sname
}
return (factor)
}
CalcCoeff(PBLData, type = "t")
m2
length(PBLData[,1])
m2 <- 0
for(i in 1:length(subset(PBLData, NewDevelopment == 1|is.na(Actual) )[,1] )){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m2 <- rbind(m2 , CalcManHour(PBLData,i, type = "t") )
}
m2 <- m2[-1]
m2
m1
names(m2)
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) ,"\n")
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
#  names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
names(ret) <- i
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
}
m2 <- 0
for(i in 1:length(subset(PBLData, NewDevelopment == 1|is.na(Actual) )[,1] )){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m2 <- rbind(m2 , CalcManHour(PBLData,i, type = "t") )
}
m2 <- m2[-1]
m2
PBLData
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
cat("SourtedData:", length(SortedData[,1]) )
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) ,"\n")
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
#  names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
}
m2 <- 0
for(i in 1:length(subset(PBLData, NewDevelopment == 1|is.na(Actual) )[,1] )){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m2 <- rbind(m2 , CalcManHour(PBLData,i, type = "t") )
}
m2 <- m2[-1]
m2
length(m2)
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
cat("SourtedData:", length(SortedData[,1]) )
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) ,"\n")
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
cat(Est, '\n')
ret <-  CalcPriMH(Study, Est, type);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
#  names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
}
CalcManHour(PBLData, 5, type = "t")
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
cat("SourtedData:", length(SortedData[,1]) )
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) ,"\n")
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
print(Est)
ret <-  CalcPriMH(Study, Est, type);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
#  names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
}
CalcManHour(PBLData, 5, type = "t")
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
cat("SourtedData:", length(SortedData[,1]) )
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
cat("num = ", num, ", multico = ", length(multico[1,]) ,"\n")
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
#  names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
#  names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(AandB[-1,], file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
options(scipen=5);return (ret[1]  - error)
}
m2 <- 0
for(i in 1:length(PBLData[,1])){
#  write.table(label[i], file = "output.txt", append = TRUE, quote = FALSE);
m2 <- rbind(m2 , CalcManHour(PBLData,i, type = "t") )
}
m2 <- m2[-1]
m2
PBLData
PBLData$Actual
CalcRelativeError(PBLData$Actual, m2)
m2
save.image("2015Model.RData")
