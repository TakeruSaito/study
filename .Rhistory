SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
#  names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
writeLines(paste("test"), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/test.csv")
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
#  write.table(ret, file = "output.txt", append = TRUE, quote = FALSE);
#  write.table(ret, file = "SubData/HyperParameters.csv", append = TRUE, quote = FALSE)
#  names(ret) <- c(NULL, NULL,NULL , NULL, NULL, NULL, NULL);
AandB <- 0
AandB <- rbind(AandB, ret)
writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
CalcPriMH <- function(pbl, checkData, type = "multi"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
predict <- CalcBeta(pbl, alpha, factor)
ptint(predict)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
head(PBLData.dummy)
PBLData.dummy[,1]
PBLData.dummy[1,]
CalcPriMH(PBLData.dummy[-1,], PBLData.dummy[1,])
CalcPriMH <- function(pbl, checkData, type = "multi"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
predict <- CalcBeta(pbl, alpha, factor)
print(predict)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcPriMH(PBLData.dummy[-1,], PBLData.dummy[1,])
CalcPriMH <- function(pbl, checkData, type = "multi"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
print(factor)
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcPriMH(PBLData.dummy[-1,], PBLData.dummy[1,])
CalcPriMH <- function(pbl, checkData, type = "multi"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
print(namese(checkData))
#write.table(factor, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcPriMH(PBLData.dummy[-1,], PBLData.dummy[1,])
CalcPriMH <- function(pbl, checkData, type = "multi"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
print(names(checkData))
#write.table(factor, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcPriMH(PBLData.dummy[-1,], PBLData.dummy[1,])
CalcPriMH <- function(pbl, checkData, type = "multi"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
print(rownames(checkData))
#write.table(factor, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcPriMH(PBLData.dummy[-1,], PBLData.dummy[1,])
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
AandB <- 0
AandB <- rbind(AandB, ret)
print(PBL[i])
#writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
#write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
CalcManHour(PBLData.dummy, 1)
CalcPriMH <- function(pbl, checkData, type = "multi"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
write.table(rownames(checkData), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
#write.table(factor, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
AandB <- 0
AandB <- rbind(AandB, ret)
print(names(PBL[i]))
#writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
#write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
CalcManHour(PBLData.dummy, 1)
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
AandB <- 0
AandB <- rbind(AandB, ret)
print(names(PBL[i,]))
#writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
#write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
CalcManHour(PBLData.dummy, 1)
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type);
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
AandB <- 0
AandB <- rbind(AandB, ret)
print(names(PBL[,i]))
#writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
#write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
CalcPriMH <- function(pbl, checkData, type = "multi", mode = "default"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
print(mode)
factor <- abs(CalcCoeff(pbl, type))
#write.table(rownames(checkData), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
#write.table(factor, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcManHour(PBLData.dummy, 1)
CalcPriMH <- function(pbl, checkData, type = "multi", mode = "default"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
if(mode == "debug"){
write.table(rownames(checkData), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
write.table(factor, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
}
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type, mode = "debug");
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
AandB <- 0
AandB <- rbind(AandB, ret)
print(names(PBL[,i]))
#writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
#write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
View(CalcPriMH)
View(CalcPriMH)
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type, mode = "debug");
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
AandB <- 0
AandB <- rbind(AandB, ret)
print(names(PBL[,i]))
#writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
#write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
CalcPriMH <- function(pbl, checkData, type = "multi", mode = "default"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
if(mode == "debug"){
write.table(rownames(checkData), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
write.table(factor, file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
}
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcManHour(PBLData.dummy, 1)
CalcPriMH <- function(pbl, checkData, type = "multi", mode = "default"){
# pbl:検査対象プロジェクト削除済みかつ多重線形性排除済みの全データ
alpha <- CalcAlpha(pbl)
pbl <- Choice(pbl)
factor <- abs(CalcCoeff(pbl, type))
if(mode == "debug"){
write.table(rownames(checkData), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
write.table(t(factor), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/Factors.csv", append = TRUE, quote = FALSE,sep = ",")
}
predict <- CalcBeta(pbl, alpha, factor)
FactMulCoeff <- 0
for(i in 5:length(pbl)){
FactMulCoeff <- c(FactMulCoeff, c(checkData[i] * factor[i - 4]))
}
FactMulCoeff <- FactMulCoeff[-1]
sigma <- 0
for(i in 1:length(FactMulCoeff)){
sigma <- sigma + as.numeric(FactMulCoeff[i])
}
ret <- alpha [2] * checkData$FPTrial * (1 + predict[2] * sigma)
ret <- abs(ret)
ret <- c(ret, checkData$Actual, ret - checkData$Actual, alpha[2], checkData$FPTrial, predict[2], sigma)
return(ret)
}
CalcManHour(PBLData.dummy, 1)
CalcManHour <- function(PBL,i, type = "multi"){
#  error <- MakeModel(PBL[-length(PBL[,1]),])
error <- MakeModel(PBL, type)
SortedData <- Choice(PBL)
multico <- Multico(SortedData) #多重線形性を排除する
#  ret <- StepFiveMulti(multico[-length(PBL[,1]),],multico[length(PBL[,1]),])
num <- as.integer(names(error))+4
Study <- multico[-(i),1:num];
Est <- multico[i, 1:num];
ret <-  CalcPriMH(Study, Est, type, mode = "debug");
names(ret) <- c("Estimate", "Actual","Error" , "Alfa", "FPTrial", "predict", "Sigma");
AandB <- 0
AandB <- rbind(AandB, ret)
#writeLines(paste(i), "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv")
#write.table(t(AandB[-1,]), file = "/Users/saitotakeru/Documents/Study/workspace/work1/SubData/HyperParameters.csv", append = TRUE, quote = FALSE,sep = ",")
options(scipen=5);return (ret[1]  - error)
}
CalcTestData(PBLData.dummy)
save.image("2015Model.RData")
ls()
PBLData
PBLData[1,]
PBLData[,1]
PBLData[1]
PBLData[,1]
PBLData[1,]
PBLData.dummy[1,]
View(data)
MakeDummy <- function(RawPBLData){
library(caret)
library(ggplot2)
tmp <- dummyVars(~., data=RawPBLData)
PBLData.dummy <- as.data.frame(predict(tmp, RawPBLData))
return(PBLData.dummy)
}
MakeDummy(PBLData)[1,]
MakeDummy(PBLData)[1,5]
label(MakeDummy(PBLData)[1,5])
labels(PBLData.dummy)
labels(PBLData.dummy[,5])
labels(PBLData.dummy)[5]
labels(PBLData.dummy)
labels(PBLData.dummy)[[2]]
labels(PBLData.dummy)[[2,5]]
labels(PBLData.dummy)[[2]][5]
PBLData.dummy[1,]
write.csv(PBLData.dummy[1,], file = "data/test.csv", quote = "FALSE", raw.names = "FALSE")
write.csv(PBLData.dummy[1,], file = "data/test.csv", quote = "FALSE", row.names = "FALSE")
write.csv(PBLData.dummy[1,], file = "data/test.csv", quote = FALSE, row.names = FALSE)
write.csv(list(PBLData.dummy[1,1], PBLData.dummy[1,]), file = "data/test.csv", quote = FALSE, row.names = FALSE)
PBLData.dummy[1,1]
labels(PBLData.dummy[1,1])
labels(PBLData.dummy[,1])
labels(PBLData.dummy[1,])
write.csv(list( labels(PBLData.dummy[1,])[[1]][1], PBLData.dummy[1,]), file = "data/test.csv", quote = FALSE, row.names = FALSE)
list( labels(PBLData.dummy[,1])[[1]][1], "This is test", PBLData.dummy[1,])
list(label = labels(PBLData.dummy[,1])[[1]][1], string = "This is test", data= PBLData.dummy[1,])
labels(PBLData.dummy[,1])[[1]][1]
labels(PBLData.dummy[,1])[[2]][1]
labels(PBLData.dummy[,1])[[2]]
labels(PBLData.dummy[,1])[[1]]
labels(PBLData.dummy[,1])
labels(PBLData.dummy[1,])
labels(PBLData.dummy[1,])[[`]]
}
`
label(PBLData.dummy[1,])
labels(PBLData.dummy[1,])[[1]][1]
list(label = labels(PBLData.dummy[1,])[[1]][1], string = "This is test", data= PBLData.dummy[1,])
labels(PBLData)[[2]][1]
CalcRelativeError(PBLData.dummy$Actual, PBLData.dummy$Estimated)
(CalcRelativeError(PBLData.dummy$Actual, abs(PBLData.dummy$Estimated))
)
mean(CalcRelativeError(PBLData.dummy$Actual, abs(PBLData.dummy$Estimated)))
RMSE(PBLData.dummy$Actual, result)
result
RMSE(PBLData.dummy$Actual, PBLData.dummy$Estimated)
RMS <- function(data){
return( mean(sqrt(data^2)) )
}
SearchProbPoint <- function(PBLData, type = "multi", filename){
palam.num <- length(PBLData[1,])
palam.first <- 5
for(i in pala.first:palam.num){
palam.name <- labels(PBLData)[[2]][i]
result.data <- CalcTestData(PBLData[, -1])
result.rmse <- RMSE(result.data, PBLData$Actual)
result.rrmse <- RMS(CalcRelativeError(PBLData$Actual, result.data))
write.csv(list(target = palam.name, rmse = result.rmse, relative_error = result.rrmse, results = result.data), file = "data/test.csv", quote = FALSE, row.names = FALSE)
}
return(0);
}
#生データをダミー変数化させるメソッド
MakeDummy <- function(RawPBLData){
library(caret)
library(ggplot2)
tmp <- dummyVars(~., data=RawPBLData)
PBLData.dummy <- as.data.frame(predict(tmp, RawPBLData))
return(PBLData.dummy)
}
RMS <- function(data){
return( mean(sqrt(data^2)) )
}
save.image("2015Model.RData")
